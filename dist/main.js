(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const t=function(){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=n}var n,o;return n=t,(o=[{key:"_hideErrorMessage",value:function(e){var t=this._form.querySelector("#"+e.id+"-error");t.textContent="",t.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass)}},{key:"_showErrorMessage",value:function(e){var t=this._form.querySelector("#"+e.id+"-error");t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputErrorClass)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideErrorMessage(e):this._showErrorMessage(e)}},{key:"_toggleButtonState",value:function(e){Array.from(this._form.querySelectorAll(this._inputSelector)).every((function(e){return e.validity.valid}))?e.classList.remove(this._inactiveButtonClass):e.classList.add(this._inactiveButtonClass)}},{key:"_setEventListeners",value:function(){var e=this,t=Array.from(this._form.querySelectorAll(this._inputSelector)),n=this._form.querySelector(this._submitButtonSelector);t.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState(n)}))}))}},{key:"enableValidation",value:function(){var e=this,t=this._form.querySelector(this._submitButtonSelector);this._form.addEventListener("submit",(function(n){n.preventDefault(),t.classList.add(e._inactiveButtonClass)})),this._setEventListeners()}}])&&e(n.prototype,o),t}();function n(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const o=function(){function e(t,n,o,r,i,u,a,c,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=t.name,this._link=t.link,this._id=t._id,t.hasOwnProperty("likes")?this._likes=t.likes:this._likes=[],t.hasOwnProperty("owner")?this._owner=t.owner._id:this._owner=n,this._userID=n,this._templateSelector=o,this._openPopUpOnClick=r,this._openConfirmDelete=i,this._updateApiDelete=u,this._updateApiAddLike=a,this._updateApiRemoveLike=c,this._confirmButton=s}var t,o;return t=e,(o=[{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".element")}},{key:"_confirmToDelete",value:function(e){var t=this;console.log(this._confirmButton),this._confirmButton.addEventListener("click",(function(){t._confirmButton.id+"ok"===e.id&&(console.log(t._confirmButton.id+"ok"===e.id),e.closest(".element").remove())}))}},{key:"_handleDeleteButton",value:function(){var e=this,t=this._card.querySelector(".delete-button");this._owner===this._userID?t.addEventListener("click",(function(){e._openConfirmDelete(),e._confirmButton.setAttribute("id",e._id),t.setAttribute("id",e._id+"ok"),e._confirmToDelete(t)})):t.remove()}},{key:"_likeElement",value:function(e){e.classList.toggle("like-button_activated"),e.classList.contains("like-button_activated")?this._updateApiAddLike(this,this._id):this._updateApiRemoveLike(this,this._id)}},{key:"_handleLikeButton",value:function(){var e=this,t=this._card.querySelector(".like-button");this._likes.some((function(t){return t._id===e._userID}))&&t.classList.add("like-button_activated"),t.addEventListener("click",(function(){e._likeElement(t)}))}},{key:"_handleCardClick",value:function(){var e=this;this._card.querySelector(".element__image").addEventListener("click",(function(){e._openPopUpOnClick(e._link,e._name)}))}},{key:"updateLikes",value:function(e){this._card.querySelector(".element__like-count").textContent=e}},{key:"getCardId",value:function(){return this._id}},{key:"createCard",value:function(){this._card=this._getTemplate().cloneNode(!0);var e=this._card.querySelector(".element__image");return this._card.querySelector(".element__title").textContent=this._name,e.src=this._link,e.alt="".concat(this._name," picture"),this._handleLikeButton(),this._handleCardClick(),this.updateLikes(this._likes.length),this._handleDeleteButton(),this._card}}])&&n(t.prototype,o),e}();function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".close-button"),this._overlay=this._popupElement.querySelector(".popup__overlay"),this._handleCloseByEscape=this._handleCloseByEscape.bind(this)}var t,n;return t=e,(n=[{key:"openPopUp",value:function(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleCloseByEscape)}},{key:"closePopUp",value:function(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleCloseByEscape)}},{key:"_handleCloseByEscape",value:function(e){"Escape"===e.key&&this.closePopUp()}},{key:"setEventListeners",value:function(){var e=this;this._closeButton.addEventListener("click",(function(){e.closePopUp()})),this._overlay.addEventListener("click",(function(){e.closePopUp()}))}}])&&r(t.prototype,n),e}();function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function c(e,t,n){return(c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=f(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,e);var t,n,o,r,i=(o=u,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(o);if(r){var n=f(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return l(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._popupPicture=t._popupElement.querySelector(".popup__picture"),t._popupCaption=t._popupElement.querySelector(".popup__picture-caption"),t}return t=u,(n=[{key:"openPopUp",value:function(e,t){this._popupPicture.src=e,this._popupCaption.textContent=t,this._popupPicture.alt="".concat(this._name," picture"),c(f(u.prototype),"openPopUp",this).call(this)}}])&&a(t.prototype,n),u}(i);function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function d(e,t,n){return(d="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=m(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(u,e);var t,n,o,r,i=(o=u,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=m(o);if(r){var n=m(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return v(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._formSubmit=t,n._formElement=n._popupElement.querySelector(".popup__form"),n._inputs=Array.from(n._formElement.querySelectorAll(".popup__input")),n}return t=u,(n=[{key:"getInputValues",value:function(){var e={};return this._inputs.forEach((function(t){var n=t.name,o=t.value;e[n]=o})),console.log(e),e}},{key:"openPopUp",value:function(){this.getInputValues(),d(m(u.prototype),"openPopUp",this).call(this)}},{key:"closePopUp",value:function(){d(m(u.prototype),"closePopUp",this).call(this),this._formElement.reset()}},{key:"setEventListeners",value:function(){var e=this;d(m(u.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e._formSubmit()}))}}])&&_(t.prototype,n),u}(i);function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function k(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function S(e,t,n){return(S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function C(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function w(e){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(u,e);var t,n,o,r,i=(o=u,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(o);if(r){var n=w(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return C(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._confirmButton=n._popupElement.querySelector(".confirm-button"),n._updateApiDelete=t,n}return t=u,(n=[{key:"_deleteCard",value:function(){this._deleteCardId=this._confirmButton.getAttribute("id"),this._updateApiDelete(this._deleteCardId)}},{key:"setEventListeners",value:function(){var e=this;S(w(u.prototype),"setEventListeners",this).call(this),this._confirmButton.addEventListener("click",(function(){e._deleteCard()}))}}])&&k(t.prototype,n),u}(i);function O(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var L=function(){function e(t,n,o,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameValue=t,this._aboutValue=n,this._avatarImage=o,this._nameInput=r,this._aboutInput=i}var t,n;return t=e,(n=[{key:"getUserId",value:function(){return this._id}},{key:"getUserName",value:function(){return this._nameValue.textContent}},{key:"getUserAbout",value:function(){return this._aboutValue.textContent}},{key:"getUserAvatar",value:function(){return this._avatar}},{key:"setUserInfo",value:function(e){this._nameValue.textContent=e.name,this._aboutValue.textContent=e.about,this._avatarImage.style.backgroundImage="url('"+e.avatar+"')"}}])&&O(t.prototype,n),e}();function U(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var I=function(){function e(t,n){var o=t.data,r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderedItems=o,this._renderer=r,this._cardContainer=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(){var e=this;this._renderedItems.forEach((function(t){return e._renderer(t)}))}},{key:"addCard",value:function(e){this._cardContainer.prepend(e)}}])&&U(t.prototype,n),e}();function j(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}const q=function(){function e(t){var n=t.baseUrl,o=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=o}var t,n;return t=e,(n=[{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}},{key:"getInitialCards",value:function(){var e=this;return fetch(this._baseUrl+"/cards",{headers:this._headers}).then((function(t){return e._checkResponse(t)}))}},{key:"getUserInfo",value:function(){var e=this;return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then((function(t){return e._checkResponse(t)}))}},{key:"editUserInfo",value:function(e,t){var n=this;return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((function(e){return n._checkResponse(e)}))}},{key:"postNewCard",value:function(e,t){var n=this;return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((function(e){return n._checkResponse(e)}))}},{key:"deleteCard",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/"+e,{method:"DELETE",headers:this._headers}).then((function(e){return t._checkResponse(e)}))}},{key:"addCardLike",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._headers}).then((function(e){return t._checkResponse(e)}))}},{key:"removeCardLike",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._headers}).then((function(e){return t._checkResponse(e)}))}},{key:"editUserAvatar",value:function(e){var t=this;return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(e){return t._checkResponse(e)}))}}])&&j(t.prototype,n),e}();var B,R,A={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},T=document.querySelector(".edit-button"),x=document.querySelector(".add-button"),D=document.querySelector(".confirm-button"),V=document.querySelector(".popup__form_type_profile"),N=V.querySelector(".popup__input_value_name"),M=V.querySelector(".popup__input_value_about"),J=document.querySelector(".profile__name"),H=document.querySelector(".profile__about"),z=document.querySelector(".save-button"),$=document.querySelector(".popup__form_type_newAvatar"),F=document.querySelector(".saveAvatar-button"),G=document.querySelector(".avatar"),K=document.querySelector(".avatar-hover"),Q=document.querySelector(".popup__form_type_newPlace"),W=(Q.querySelector(".popup__input_value_placeTitle"),Q.querySelector(".popup__input_value_placeImageLink"),document.querySelector(".create-button"));function X(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}console.log(B);var Y=new q({baseUrl:"https://around.nomoreparties.co/v1/group-7",headers:{authorization:"9df52f9f-cc17-4475-93ad-607c569a3f4b","Content-Type":"application/json"}}),Z=new L(J,H,G,N,M);function ee(e,t){return new o(e,t,".element-template",te,ne,oe,re,ie,D).createCard()}function te(e,t){ae.openPopUp(e,t)}function ne(){ce.openPopUp()}function oe(e){Y.deleteCard(e).then((function(e){console.log(e),ce.closePopUp()})).catch((function(e){console.log(e)}))}function re(e,t){Y.addCardLike(t).then((function(t){console.log(t,t.likes.length);var n=t.likes.length;e.updateLikes(n)})).catch((function(e){console.log(e)}))}function ie(e,t){Y.removeCardLike(t).then((function(t){console.log(t,t.likes.length);var n=t.likes.length;e.updateLikes(n)})).catch((function(e){console.log(e)}))}function ue(e){(R=new I({data:e,renderer:function(e){var t=ee(e,B);R.addCard(t)}},".elements")).renderItems()}Promise.all([Y.getInitialCards(),Y.getUserInfo()]).then((function(e){var t,n,o=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],o=!0,r=!1,i=void 0;try{for(var u,a=e[Symbol.iterator]();!(o=(u=a.next()).done)&&(n.push(u.value),!t||n.length!==t);o=!0);}catch(e){r=!0,i=e}finally{try{o||null==a.return||a.return()}finally{if(r)throw i}}return n}}(t,n)||function(e,t){if(e){if("string"==typeof e)return X(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?X(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=o[0],i=o[1];ue(r),console.log(r),console.log(i),B=i._id,Z.setUserInfo(i),N.value=i.name,M.value=i.about,console.log(Z)})).catch((function(e){console.log(e)})),Y.getInitialCards().then((function(e){ue(e),console.log(e)})).catch((function(e){console.log(e)})),Y.getUserInfo().then((function(e){console.log(e),B=e._id,Z.setUserInfo(e),N.value=e.name,M.value=e.about,console.log(Z)})).catch((function(e){console.log(e)}));var ae=new p(".popup_type_picture");ae.setEventListeners();var ce=new P(".popup_type_confirmDelete",oe);ce.setEventListeners();var se=new t(A,V),le=new t(A,Q),fe=new t(A,$);se.enableValidation(),le.enableValidation(),fe.enableValidation();var pe=new b(".popup_type_editProfile",(function(){var e=pe.getInputValues(),t=e.profileNameInput,n=e.profileAboutInput;z.textContent="Saving...",Y.editUserInfo(t,n).then((function(e){console.log(e),z.textContent="Saved",Z.setUserInfo(e),console.log(Z),pe.closePopUp()})).catch((function(e){console.log(e)}))})),he=new b(".popup_type_newPlace",(function(){var e={},t=he.getInputValues(),n=t.placeTitleInput,o=t.placeImageLinkInput;e.name=n,e.link=o,W.textContent="Saving...",Y.postNewCard(n,o).then((function(e){W.textContent="Saved";var t=ee(e,B);R.addCard(t),he.closePopUp()})).catch((function(e){console.log(e)}))})),_e=new b(".popup_type_newAvatar",(function(){var e=_e.getInputValues().avatarLink;""==e?console.log("no input"):(console.log(e),F.textContent="Saving...",Y.editUserAvatar(e).then((function(e){console.log(e),Z.setUserInfo(e),F.textContent="Saved",_e.closePopUp()})).catch((function(e){console.log(e)})))}));pe.setEventListeners(),he.setEventListeners(),_e.setEventListeners(),T.addEventListener("click",(function(){pe.openPopUp(),N.value=Z.getUserName(),M.value=Z.getUserAbout()})),x.addEventListener("click",(function(){he.openPopUp()})),G.addEventListener("click",(function(){_e.openPopUp()})),G.addEventListener("mouseover",(function(){K.style.opacity=1})),G.addEventListener("mouseout",(function(){K.style.opacity=0}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,